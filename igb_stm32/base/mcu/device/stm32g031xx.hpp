// Generated by svd_parser.rb. Dont't edit please.
#ifndef IGB_STM32_BASE_MCU_DEVICE_STM32G031XX_H
#define IGB_STM32_BASE_MCU_DEVICE_STM32G031XX_H

#include <igb_stm32/base.hpp>
#include <array>
#include <optional>

#define STM32_PERIPHGRP_IWDG_EXISTS 1
#define STM32_PERIPH_IWDG_EXISTS 1
#define STM32_PERIPHGRP_WWDG_EXISTS 1
#define STM32_PERIPH_WWDG_EXISTS 1
#define STM32_PERIPHGRP_FLASH_EXISTS 1
#define STM32_PERIPH_FLASH_EXISTS 1
#define STM32_PERIPHGRP_RCC_EXISTS 1
#define STM32_PERIPH_RCC_EXISTS 1
#define STM32_PERIPHGRP_PWR_EXISTS 1
#define STM32_PERIPH_PWR_EXISTS 1
#define STM32_PERIPHGRP_DMA_EXISTS 1
#define STM32_PERIPH_DMA1_EXISTS 1
#define STM32_PERIPHGRP_DMAMUX_EXISTS 1
#define STM32_PERIPH_DMAMUX_EXISTS 1
#define STM32_PERIPHGRP_GPIO_EXISTS 1
#define STM32_PERIPH_GPIOA_EXISTS 1
#define STM32_PERIPH_GPIOB_EXISTS 1
#define STM32_PERIPH_GPIOC_EXISTS 1
#define STM32_PERIPH_GPIOD_EXISTS 1
#define STM32_PERIPH_GPIOF_EXISTS 1
#define STM32_PERIPHGRP_CRC_EXISTS 1
#define STM32_PERIPH_CRC_EXISTS 1
#define STM32_PERIPHGRP_EXTI_EXISTS 1
#define STM32_PERIPH_EXTI_EXISTS 1
#define STM32_PERIPHGRP_TIM_EXISTS 1
#define STM32_PERIPH_TIM16_EXISTS 1
#define STM32_PERIPH_TIM17_EXISTS 1
#define STM32_PERIPH_TIM1_EXISTS 1
#define STM32_PERIPH_TIM14_EXISTS 1
#define STM32_PERIPH_TIM2_EXISTS 1
#define STM32_PERIPH_TIM3_EXISTS 1
#define STM32_PERIPHGRP_USART_EXISTS 1
#define STM32_PERIPH_USART1_EXISTS 1
#define STM32_PERIPH_USART2_EXISTS 1
#define STM32_PERIPHGRP_SPI_EXISTS 1
#define STM32_PERIPH_SPI1_EXISTS 1
#define STM32_PERIPH_SPI2_EXISTS 1
#define STM32_PERIPHGRP_ADC_EXISTS 1
#define STM32_PERIPH_ADC1_EXISTS 1
#define STM32_PERIPHGRP_SYSCFG_EXISTS 1
#define STM32_PERIPH_SYSCFG_EXISTS 1
#define STM32_PERIPHGRP_TAMP_EXISTS 1
#define STM32_PERIPH_TAMP_EXISTS 1
#define STM32_PERIPHGRP_LPTIM_EXISTS 1
#define STM32_PERIPH_LPTIM1_EXISTS 1
#define STM32_PERIPH_LPTIM2_EXISTS 1
#define STM32_PERIPHGRP_I2C_EXISTS 1
#define STM32_PERIPH_I2C1_EXISTS 1
#define STM32_PERIPH_I2C2_EXISTS 1
#define STM32_PERIPHGRP_RTC_EXISTS 1
#define STM32_PERIPH_RTC_EXISTS 1
#define STM32_PERIPHGRP_VREFBUF_EXISTS 1
#define STM32_PERIPH_VREFBUF_EXISTS 1
#define STM32_PERIPHGRP_DBG_EXISTS 1
#define STM32_PERIPH_DBG_EXISTS 1
#define STM32_PERIPH_GPIO_REG_BRR_EXISTS 1

namespace igb {
namespace stm32 {

enum class PeriphGroupType : uint16_t {
  rcc = 0,
  dma,
  gpio,
  exti,
  tim,
  usart,
  spi,
  adc,
  syscfg,
  i2c,
};

enum class PeriphType : uint16_t {
  rcc = 0,
  dma1,
  gpioa,
  gpiob,
  gpioc,
  gpiod,
  gpiof,
  exti,
  tim1,
  tim2,
  tim3,
  tim14,
  tim16,
  tim17,
  usart1,
  usart2,
  spi1,
  spi2,
  adc1,
  syscfg,
  i2c1,
  i2c2,
};

enum class DmaType : uint8_t {
  dma1 = 0,
};
constexpr static uint8_t to_idx(DmaType type) {
  switch (type) {
    case DmaType::dma1:
      return 0;
      break;
  }
  return 0;
}
enum class GpioType : uint8_t {
  gpioa = 0,
  gpiob,
  gpioc,
  gpiod,
  gpiof,
};
constexpr static uint8_t to_idx(GpioType type) {
  switch (type) {
    case GpioType::gpioa:
      return 0;
      break;
    case GpioType::gpiob:
      return 1;
      break;
    case GpioType::gpioc:
      return 2;
      break;
    case GpioType::gpiod:
      return 3;
      break;
    case GpioType::gpiof:
      return 4;
      break;
  }
  return 0;
}
enum class TimType : uint8_t {
  tim1 = 0,
  tim2,
  tim3,
  tim14,
  tim16,
  tim17,
};
constexpr static uint8_t to_idx(TimType type) {
  switch (type) {
    case TimType::tim1:
      return 0;
      break;
    case TimType::tim2:
      return 1;
      break;
    case TimType::tim3:
      return 2;
      break;
    case TimType::tim14:
      return 3;
      break;
    case TimType::tim16:
      return 4;
      break;
    case TimType::tim17:
      return 5;
      break;
  }
  return 0;
}
enum class UsartType : uint8_t {
  usart1 = 0,
  usart2,
};
constexpr static uint8_t to_idx(UsartType type) {
  switch (type) {
    case UsartType::usart1:
      return 0;
      break;
    case UsartType::usart2:
      return 1;
      break;
  }
  return 0;
}
enum class SpiType : uint8_t {
  spi1 = 0,
  spi2,
};
constexpr static uint8_t to_idx(SpiType type) {
  switch (type) {
    case SpiType::spi1:
      return 0;
      break;
    case SpiType::spi2:
      return 1;
      break;
  }
  return 0;
}
enum class AdcType : uint8_t {
  adc1 = 0,
};
constexpr static uint8_t to_idx(AdcType type) {
  switch (type) {
    case AdcType::adc1:
      return 0;
      break;
  }
  return 0;
}
enum class I2cType : uint8_t {
  i2c1 = 0,
  i2c2,
};
constexpr static uint8_t to_idx(I2cType type) {
  switch (type) {
    case I2cType::i2c1:
      return 0;
      break;
    case I2cType::i2c2:
      return 1;
      break;
  }
  return 0;
}

enum class GpioPinType : uint8_t {
  pa0 = (0 << 4) | 0,
  pa1 = (0 << 4) | 1,
  pa2 = (0 << 4) | 2,
  pa3 = (0 << 4) | 3,
  pa4 = (0 << 4) | 4,
  pa5 = (0 << 4) | 5,
  pa6 = (0 << 4) | 6,
  pa7 = (0 << 4) | 7,
  pa8 = (0 << 4) | 8,
  pa9 = (0 << 4) | 9,
  pa10 = (0 << 4) | 10,
  pa11 = (0 << 4) | 11,
  pa12 = (0 << 4) | 12,
  pa13 = (0 << 4) | 13,
  pa14 = (0 << 4) | 14,
  pa15 = (0 << 4) | 15,
  pb0 = (1 << 4) | 0,
  pb1 = (1 << 4) | 1,
  pb2 = (1 << 4) | 2,
  pb3 = (1 << 4) | 3,
  pb4 = (1 << 4) | 4,
  pb5 = (1 << 4) | 5,
  pb6 = (1 << 4) | 6,
  pb7 = (1 << 4) | 7,
  pb8 = (1 << 4) | 8,
  pb9 = (1 << 4) | 9,
  pb10 = (1 << 4) | 10,
  pb11 = (1 << 4) | 11,
  pb12 = (1 << 4) | 12,
  pb13 = (1 << 4) | 13,
  pb14 = (1 << 4) | 14,
  pb15 = (1 << 4) | 15,
  pc0 = (2 << 4) | 0,
  pc1 = (2 << 4) | 1,
  pc2 = (2 << 4) | 2,
  pc3 = (2 << 4) | 3,
  pc4 = (2 << 4) | 4,
  pc5 = (2 << 4) | 5,
  pc6 = (2 << 4) | 6,
  pc7 = (2 << 4) | 7,
  pc8 = (2 << 4) | 8,
  pc9 = (2 << 4) | 9,
  pc10 = (2 << 4) | 10,
  pc11 = (2 << 4) | 11,
  pc12 = (2 << 4) | 12,
  pc13 = (2 << 4) | 13,
  pc14 = (2 << 4) | 14,
  pc15 = (2 << 4) | 15,
  pd0 = (3 << 4) | 0,
  pd1 = (3 << 4) | 1,
  pd2 = (3 << 4) | 2,
  pd3 = (3 << 4) | 3,
  pd4 = (3 << 4) | 4,
  pd5 = (3 << 4) | 5,
  pd6 = (3 << 4) | 6,
  pd7 = (3 << 4) | 7,
  pd8 = (3 << 4) | 8,
  pd9 = (3 << 4) | 9,
  pd10 = (3 << 4) | 10,
  pd11 = (3 << 4) | 11,
  pd12 = (3 << 4) | 12,
  pd13 = (3 << 4) | 13,
  pd14 = (3 << 4) | 14,
  pd15 = (3 << 4) | 15,
  pf0 = (5 << 4) | 0,
  pf1 = (5 << 4) | 1,
  pf2 = (5 << 4) | 2,
  pf3 = (5 << 4) | 3,
  pf4 = (5 << 4) | 4,
  pf5 = (5 << 4) | 5,
  pf6 = (5 << 4) | 6,
  pf7 = (5 << 4) | 7,
  pf8 = (5 << 4) | 8,
  pf9 = (5 << 4) | 9,
  pf10 = (5 << 4) | 10,
  pf11 = (5 << 4) | 11,
  pf12 = (5 << 4) | 12,
  pf13 = (5 << 4) | 13,
  pf14 = (5 << 4) | 14,
  pf15 = (5 << 4) | 15,
};

constexpr static GpioType extract_gpio_type(GpioPinType pin_type) {
  switch (pin_type) {
    case GpioPinType::pa0:
    case GpioPinType::pa1:
    case GpioPinType::pa2:
    case GpioPinType::pa3:
    case GpioPinType::pa4:
    case GpioPinType::pa5:
    case GpioPinType::pa6:
    case GpioPinType::pa7:
    case GpioPinType::pa8:
    case GpioPinType::pa9:
    case GpioPinType::pa10:
    case GpioPinType::pa11:
    case GpioPinType::pa12:
    case GpioPinType::pa13:
    case GpioPinType::pa14:
    case GpioPinType::pa15:
      return GpioType::gpioa;
      [[fallthrough]];
    case GpioPinType::pb0:
    case GpioPinType::pb1:
    case GpioPinType::pb2:
    case GpioPinType::pb3:
    case GpioPinType::pb4:
    case GpioPinType::pb5:
    case GpioPinType::pb6:
    case GpioPinType::pb7:
    case GpioPinType::pb8:
    case GpioPinType::pb9:
    case GpioPinType::pb10:
    case GpioPinType::pb11:
    case GpioPinType::pb12:
    case GpioPinType::pb13:
    case GpioPinType::pb14:
    case GpioPinType::pb15:
      return GpioType::gpiob;
      [[fallthrough]];
    case GpioPinType::pc0:
    case GpioPinType::pc1:
    case GpioPinType::pc2:
    case GpioPinType::pc3:
    case GpioPinType::pc4:
    case GpioPinType::pc5:
    case GpioPinType::pc6:
    case GpioPinType::pc7:
    case GpioPinType::pc8:
    case GpioPinType::pc9:
    case GpioPinType::pc10:
    case GpioPinType::pc11:
    case GpioPinType::pc12:
    case GpioPinType::pc13:
    case GpioPinType::pc14:
    case GpioPinType::pc15:
      return GpioType::gpioc;
      [[fallthrough]];
    case GpioPinType::pd0:
    case GpioPinType::pd1:
    case GpioPinType::pd2:
    case GpioPinType::pd3:
    case GpioPinType::pd4:
    case GpioPinType::pd5:
    case GpioPinType::pd6:
    case GpioPinType::pd7:
    case GpioPinType::pd8:
    case GpioPinType::pd9:
    case GpioPinType::pd10:
    case GpioPinType::pd11:
    case GpioPinType::pd12:
    case GpioPinType::pd13:
    case GpioPinType::pd14:
    case GpioPinType::pd15:
      return GpioType::gpiod;
      [[fallthrough]];
    case GpioPinType::pf0:
    case GpioPinType::pf1:
    case GpioPinType::pf2:
    case GpioPinType::pf3:
    case GpioPinType::pf4:
    case GpioPinType::pf5:
    case GpioPinType::pf6:
    case GpioPinType::pf7:
    case GpioPinType::pf8:
    case GpioPinType::pf9:
    case GpioPinType::pf10:
    case GpioPinType::pf11:
    case GpioPinType::pf12:
    case GpioPinType::pf13:
    case GpioPinType::pf14:
    case GpioPinType::pf15:
      return GpioType::gpiof;
      [[fallthrough]];
    default:
      break;
  }
  return GpioType::gpioa; // never reach
}

constexpr static uint8_t extract_pin_idx(GpioPinType pin_type) {
  switch (pin_type) {
    case GpioPinType::pa0:
      return 0;
    case GpioPinType::pa1:
      return 1;
    case GpioPinType::pa2:
      return 2;
    case GpioPinType::pa3:
      return 3;
    case GpioPinType::pa4:
      return 4;
    case GpioPinType::pa5:
      return 5;
    case GpioPinType::pa6:
      return 6;
    case GpioPinType::pa7:
      return 7;
    case GpioPinType::pa8:
      return 8;
    case GpioPinType::pa9:
      return 9;
    case GpioPinType::pa10:
      return 10;
    case GpioPinType::pa11:
      return 11;
    case GpioPinType::pa12:
      return 12;
    case GpioPinType::pa13:
      return 13;
    case GpioPinType::pa14:
      return 14;
    case GpioPinType::pa15:
      return 15;
    case GpioPinType::pb0:
      return 0;
    case GpioPinType::pb1:
      return 1;
    case GpioPinType::pb2:
      return 2;
    case GpioPinType::pb3:
      return 3;
    case GpioPinType::pb4:
      return 4;
    case GpioPinType::pb5:
      return 5;
    case GpioPinType::pb6:
      return 6;
    case GpioPinType::pb7:
      return 7;
    case GpioPinType::pb8:
      return 8;
    case GpioPinType::pb9:
      return 9;
    case GpioPinType::pb10:
      return 10;
    case GpioPinType::pb11:
      return 11;
    case GpioPinType::pb12:
      return 12;
    case GpioPinType::pb13:
      return 13;
    case GpioPinType::pb14:
      return 14;
    case GpioPinType::pb15:
      return 15;
    case GpioPinType::pc0:
      return 0;
    case GpioPinType::pc1:
      return 1;
    case GpioPinType::pc2:
      return 2;
    case GpioPinType::pc3:
      return 3;
    case GpioPinType::pc4:
      return 4;
    case GpioPinType::pc5:
      return 5;
    case GpioPinType::pc6:
      return 6;
    case GpioPinType::pc7:
      return 7;
    case GpioPinType::pc8:
      return 8;
    case GpioPinType::pc9:
      return 9;
    case GpioPinType::pc10:
      return 10;
    case GpioPinType::pc11:
      return 11;
    case GpioPinType::pc12:
      return 12;
    case GpioPinType::pc13:
      return 13;
    case GpioPinType::pc14:
      return 14;
    case GpioPinType::pc15:
      return 15;
    case GpioPinType::pd0:
      return 0;
    case GpioPinType::pd1:
      return 1;
    case GpioPinType::pd2:
      return 2;
    case GpioPinType::pd3:
      return 3;
    case GpioPinType::pd4:
      return 4;
    case GpioPinType::pd5:
      return 5;
    case GpioPinType::pd6:
      return 6;
    case GpioPinType::pd7:
      return 7;
    case GpioPinType::pd8:
      return 8;
    case GpioPinType::pd9:
      return 9;
    case GpioPinType::pd10:
      return 10;
    case GpioPinType::pd11:
      return 11;
    case GpioPinType::pd12:
      return 12;
    case GpioPinType::pd13:
      return 13;
    case GpioPinType::pd14:
      return 14;
    case GpioPinType::pd15:
      return 15;
    case GpioPinType::pf0:
      return 0;
    case GpioPinType::pf1:
      return 1;
    case GpioPinType::pf2:
      return 2;
    case GpioPinType::pf3:
      return 3;
    case GpioPinType::pf4:
      return 4;
    case GpioPinType::pf5:
      return 5;
    case GpioPinType::pf6:
      return 6;
    case GpioPinType::pf7:
      return 7;
    case GpioPinType::pf8:
      return 8;
    case GpioPinType::pf9:
      return 9;
    case GpioPinType::pf10:
      return 10;
    case GpioPinType::pf11:
      return 11;
    case GpioPinType::pf12:
      return 12;
    case GpioPinType::pf13:
      return 13;
    case GpioPinType::pf14:
      return 14;
    case GpioPinType::pf15:
      return 15;
    default:
      break;
  }
  return 0; // never reach
}

enum class BusType : uint8_t {
  ahb = 0,
  apb_1,
  apb_2,
  iop,
};

const std::array<__IO uint32_t*, 4> STM32_BUS_TO_ENR_ADDRESS = {
  &(RCC->AHBENR),
  &(RCC->APBENR1),
  &(RCC->APBENR2),
  &(RCC->IOPENR),
};

const std::array<__IO uint32_t*, 4> STM32_BUS_TO_RSTR_ADDRESS = {
  &(RCC->AHBRSTR),
  &(RCC->APBRSTR1),
  &(RCC->APBRSTR2),
  &(RCC->IOPRSTR),
};

#include <igb_stm32/base/_info.hpp>

constexpr struct PeriphInfo {
  const RccInfo rcc {
    .periph_type = PeriphType::rcc,
    .p_rcc = RCC,
    .addr = RCC_BASE,
  };
  const std::array<DmaInfo, 1> dma {
    DmaInfo {
      .periph_type = PeriphType::dma1,
      .p_dma = DMA1,
      .addr = DMA1_BASE,
      .bus = PeriphBusInfo { BusType::ahb, (uint32_t)1 << 0},
      .channels = {
  
        DmaChannelInfo {
          .exists = true,
          .p_dma_channel = (DMA_Channel_TypeDef*)DMA1_Channel1,
          .addr = DMA1_Channel1_BASE,
          .irqn = DMA1_Channel1_IRQn
        },
  
        DmaChannelInfo {
          .exists = true,
          .p_dma_channel = (DMA_Channel_TypeDef*)DMA1_Channel2,
          .addr = DMA1_Channel2_BASE,
          .irqn = DMA1_Channel2_3_IRQn
        },
  
        DmaChannelInfo {
          .exists = true,
          .p_dma_channel = (DMA_Channel_TypeDef*)DMA1_Channel3,
          .addr = DMA1_Channel3_BASE,
          .irqn = DMA1_Channel2_3_IRQn
        },
  
        DmaChannelInfo {
          .exists = true,
          .p_dma_channel = (DMA_Channel_TypeDef*)DMA1_Channel4,
          .addr = DMA1_Channel4_BASE,
          .irqn = DMA1_Ch4_5_DMAMUX1_OVR_IRQn
        },
  
        DmaChannelInfo {
          .exists = true,
          .p_dma_channel = (DMA_Channel_TypeDef*)DMA1_Channel5,
          .addr = DMA1_Channel5_BASE,
          .irqn = DMA1_Ch4_5_DMAMUX1_OVR_IRQn
        },
  
        DmaChannelInfo {
          .exists = false,
          .p_dma_channel = (DMA_Channel_TypeDef*)0,
          .addr = 0,
          .irqn = (IRQn_Type)0
        },
  
        DmaChannelInfo {
          .exists = false,
          .p_dma_channel = (DMA_Channel_TypeDef*)0,
          .addr = 0,
          .irqn = (IRQn_Type)0
        },
  
        DmaChannelInfo {
          .exists = false,
          .p_dma_channel = (DMA_Channel_TypeDef*)0,
          .addr = 0,
          .irqn = (IRQn_Type)0
        },
      },
    }
  };
  const std::array<GpioInfo, 5> gpio {
    GpioInfo {
      .periph_type = PeriphType::gpioa,
      .p_gpio = GPIOA,
      .addr = GPIOA_BASE,
      .bus = PeriphBusInfo { BusType::iop, (uint32_t)1 << 0},
    },
    GpioInfo {
      .periph_type = PeriphType::gpiob,
      .p_gpio = GPIOB,
      .addr = GPIOB_BASE,
      .bus = PeriphBusInfo { BusType::iop, (uint32_t)1 << 1},
    },
    GpioInfo {
      .periph_type = PeriphType::gpioc,
      .p_gpio = GPIOC,
      .addr = GPIOC_BASE,
      .bus = PeriphBusInfo { BusType::iop, (uint32_t)1 << 2},
    },
    GpioInfo {
      .periph_type = PeriphType::gpiod,
      .p_gpio = GPIOD,
      .addr = GPIOD_BASE,
      .bus = PeriphBusInfo { BusType::iop, (uint32_t)1 << 3},
    },
    GpioInfo {
      .periph_type = PeriphType::gpiof,
      .p_gpio = GPIOF,
      .addr = GPIOF_BASE,
      .bus = PeriphBusInfo { BusType::iop, (uint32_t)1 << 5},
    },
  };
  const ExtiInfo exti {
    .periph_type = PeriphType::exti,
    .p_exti = EXTI,
    .addr = EXTI_BASE,
    .line_irqns = {
      EXTI0_1_IRQn,
      EXTI0_1_IRQn,
      EXTI2_3_IRQn,
      EXTI2_3_IRQn,
      EXTI4_15_IRQn,
      EXTI4_15_IRQn,
      EXTI4_15_IRQn,
      EXTI4_15_IRQn,
      EXTI4_15_IRQn,
      EXTI4_15_IRQn,
      EXTI4_15_IRQn,
      EXTI4_15_IRQn,
      EXTI4_15_IRQn,
      EXTI4_15_IRQn,
      EXTI4_15_IRQn,
      EXTI4_15_IRQn,
    },
  };
  const std::array<TimInfo, 6> tim {
    TimInfo {
      .periph_type = PeriphType::tim1,
      .category = TimCategory::ADVANCED,
      .p_tim = TIM1,
      .addr = TIM1_BASE,
      .irqn = TIM1_BRK_UP_TRG_COM_IRQn,
      .bus = PeriphBusInfo { BusType::apb_2, (uint32_t)1 << 11},
    },
    TimInfo {
      .periph_type = PeriphType::tim2,
      .category = TimCategory::GENERAL,
      .p_tim = TIM2,
      .addr = TIM2_BASE,
      .irqn = TIM2_IRQn,
      .bus = PeriphBusInfo { BusType::apb_1, (uint32_t)1 << 0},
    },
    TimInfo {
      .periph_type = PeriphType::tim3,
      .category = TimCategory::GENERAL,
      .p_tim = TIM3,
      .addr = TIM3_BASE,
      .irqn = TIM3_IRQn,
      .bus = PeriphBusInfo { BusType::apb_1, (uint32_t)1 << 1},
    },
    TimInfo {
      .periph_type = PeriphType::tim14,
      .category = TimCategory::GENERAL,
      .p_tim = TIM14,
      .addr = TIM14_BASE,
      .irqn = TIM14_IRQn,
      .bus = PeriphBusInfo { BusType::apb_2, (uint32_t)1 << 15},
    },
    TimInfo {
      .periph_type = PeriphType::tim16,
      .category = TimCategory::GENERAL,
      .p_tim = TIM16,
      .addr = TIM16_BASE,
      .irqn = TIM16_IRQn,
      .bus = PeriphBusInfo { BusType::apb_2, (uint32_t)1 << 17},
    },
    TimInfo {
      .periph_type = PeriphType::tim17,
      .category = TimCategory::GENERAL,
      .p_tim = TIM17,
      .addr = TIM17_BASE,
      .irqn = TIM17_IRQn,
      .bus = PeriphBusInfo { BusType::apb_2, (uint32_t)1 << 18},
    },
  };
  const std::array<UsartInfo, 2> usart {
    UsartInfo {
      .periph_type = PeriphType::usart1,
      .p_usart = USART1,
      .addr = USART1_BASE,
      .irqn = USART1_IRQn,
      .bus = PeriphBusInfo { BusType::apb_2, (uint32_t)1 << 14},
    },
    UsartInfo {
      .periph_type = PeriphType::usart2,
      .p_usart = USART2,
      .addr = USART2_BASE,
      .irqn = USART2_IRQn,
      .bus = PeriphBusInfo { BusType::apb_1, (uint32_t)1 << 17},
    },
  };
  const std::array<SpiInfo, 2> spi {
    SpiInfo {
      .periph_type = PeriphType::spi1,
      .p_spi = SPI1,
      .addr = SPI1_BASE,
      .bus = PeriphBusInfo { BusType::apb_2, (uint32_t)1 << 12},
    },
    SpiInfo {
      .periph_type = PeriphType::spi2,
      .p_spi = SPI2,
      .addr = SPI2_BASE,
      .bus = PeriphBusInfo { BusType::apb_1, (uint32_t)1 << 14},
    },
  };
  const std::array<AdcInfo, 1> adc {
    AdcInfo {
      .periph_type = PeriphType::adc1,
      .p_adc = ADC1,
      .addr = ADC1_BASE,
      .irqn = ADC1_IRQn,
      .bus = PeriphBusInfo { BusType::apb_2, (uint32_t)1 << 20},
    },
  };
  const SysCfgInfo syscfg {
    .periph_type = PeriphType::syscfg,
    .p_syscfg = SYSCFG,
    .addr = SYSCFG_BASE,
    .bus = PeriphBusInfo { BusType::apb_2, (uint32_t)1 << 0},
  };
  const std::array<I2cInfo, 2> i2c {
    I2cInfo {
      .periph_type = PeriphType::i2c1,
      .p_i2c = I2C1,
      .addr = I2C1_BASE,
      .bus = PeriphBusInfo { BusType::apb_1, (uint32_t)1 << 21},
    },
    I2cInfo {
      .periph_type = PeriphType::i2c2,
      .p_i2c = I2C2,
      .addr = I2C2_BASE,
      .bus = PeriphBusInfo { BusType::apb_1, (uint32_t)1 << 22},
    },
  };
} STM32_PERIPH_INFO;

enum class GpioAf : uint8_t {
  af0 = 0,
  af1,
  af2,
  af3,
  af4,
  af5,
  af6,
  af7,
};

constexpr static std::optional<GpioAf> get_af_idx(PeriphType periph_type, GpioPinType gpio_pin) {
  switch (gpio_pin) {
    case GpioPinType::pa0:
      switch (periph_type) {
        case PeriphType::spi2:
          return GpioAf::af0;
        case PeriphType::usart2:
          return GpioAf::af1;
        case PeriphType::tim2:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pa1:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::usart2:
          return GpioAf::af1;
        case PeriphType::tim2:
          return GpioAf::af2;
        case PeriphType::i2c1:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pa2:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::usart2:
          return GpioAf::af1;
        case PeriphType::tim2:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pa3:
      switch (periph_type) {
        case PeriphType::spi2:
          return GpioAf::af0;
        case PeriphType::usart2:
          return GpioAf::af1;
        case PeriphType::tim2:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pa4:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::spi2:
          return GpioAf::af1;
        case PeriphType::tim14:
          return GpioAf::af4;
        default:
          break;
      }
      break;
    case GpioPinType::pa5:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::tim2:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pa6:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::tim3:
          return GpioAf::af1;
        case PeriphType::tim1:
          return GpioAf::af2;
        case PeriphType::tim16:
          return GpioAf::af5;
        default:
          break;
      }
      break;
    case GpioPinType::pa7:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::tim3:
          return GpioAf::af1;
        case PeriphType::tim1:
          return GpioAf::af2;
        case PeriphType::tim14:
          return GpioAf::af4;
        case PeriphType::tim17:
          return GpioAf::af5;
        default:
          break;
      }
      break;
    case GpioPinType::pa8:
      switch (periph_type) {
        case PeriphType::rcc:
          return GpioAf::af0;
        case PeriphType::spi2:
          return GpioAf::af1;
        case PeriphType::tim1:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pa9:
      switch (periph_type) {
        case PeriphType::rcc:
          return GpioAf::af0;
        case PeriphType::usart1:
          return GpioAf::af1;
        case PeriphType::tim1:
          return GpioAf::af2;
        case PeriphType::spi2:
          return GpioAf::af4;
        case PeriphType::i2c1:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pa10:
      switch (periph_type) {
        case PeriphType::spi2:
          return GpioAf::af0;
        case PeriphType::usart1:
          return GpioAf::af1;
        case PeriphType::tim1:
          return GpioAf::af2;
        case PeriphType::tim17:
          return GpioAf::af5;
        case PeriphType::i2c1:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pa11:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::usart1:
          return GpioAf::af1;
        case PeriphType::tim1:
          return GpioAf::af2;
        case PeriphType::i2c2:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pa12:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::usart1:
          return GpioAf::af1;
        case PeriphType::tim1:
          return GpioAf::af2;
        case PeriphType::i2c2:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pa13:
      switch (periph_type) {
        default:
          break;
      }
      break;
    case GpioPinType::pa14:
      switch (periph_type) {
        case PeriphType::usart2:
          return GpioAf::af1;
        default:
          break;
      }
      break;
    case GpioPinType::pa15:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::usart2:
          return GpioAf::af1;
        case PeriphType::tim2:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pb0:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::tim3:
          return GpioAf::af1;
        case PeriphType::tim1:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pb1:
      switch (periph_type) {
        case PeriphType::tim14:
          return GpioAf::af0;
        case PeriphType::tim3:
          return GpioAf::af1;
        case PeriphType::tim1:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pb2:
      switch (periph_type) {
        case PeriphType::spi2:
          return GpioAf::af1;
        default:
          break;
      }
      break;
    case GpioPinType::pb3:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::tim1:
          return GpioAf::af1;
        case PeriphType::tim2:
          return GpioAf::af2;
        case PeriphType::usart1:
          return GpioAf::af4;
        default:
          break;
      }
      break;
    case GpioPinType::pb4:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::tim3:
          return GpioAf::af1;
        case PeriphType::usart1:
          return GpioAf::af4;
        case PeriphType::tim17:
          return GpioAf::af5;
        default:
          break;
      }
      break;
    case GpioPinType::pb5:
      switch (periph_type) {
        case PeriphType::spi1:
          return GpioAf::af0;
        case PeriphType::tim3:
          return GpioAf::af1;
        case PeriphType::tim16:
          return GpioAf::af2;
        case PeriphType::i2c1:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pb6:
      switch (periph_type) {
        case PeriphType::usart1:
          return GpioAf::af0;
        case PeriphType::tim1:
          return GpioAf::af1;
        case PeriphType::tim16:
          return GpioAf::af2;
        case PeriphType::spi2:
          return GpioAf::af4;
        case PeriphType::i2c1:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pb7:
      switch (periph_type) {
        case PeriphType::usart1:
          return GpioAf::af0;
        case PeriphType::spi2:
          return GpioAf::af1;
        case PeriphType::tim17:
          return GpioAf::af2;
        case PeriphType::i2c1:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pb8:
      switch (periph_type) {
        case PeriphType::spi2:
          return GpioAf::af1;
        case PeriphType::tim16:
          return GpioAf::af2;
        case PeriphType::i2c1:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pb9:
      switch (periph_type) {
        case PeriphType::tim17:
          return GpioAf::af2;
        case PeriphType::spi2:
          return GpioAf::af5;
        case PeriphType::i2c1:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pb10:
      switch (periph_type) {
        case PeriphType::tim2:
          return GpioAf::af2;
        case PeriphType::spi2:
          return GpioAf::af5;
        case PeriphType::i2c2:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pb11:
      switch (periph_type) {
        case PeriphType::spi2:
          return GpioAf::af0;
        case PeriphType::tim2:
          return GpioAf::af2;
        case PeriphType::i2c2:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pb12:
      switch (periph_type) {
        case PeriphType::spi2:
          return GpioAf::af0;
        case PeriphType::tim1:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pb13:
      switch (periph_type) {
        case PeriphType::spi2:
          return GpioAf::af0;
        case PeriphType::tim1:
          return GpioAf::af2;
        case PeriphType::i2c2:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pb14:
      switch (periph_type) {
        case PeriphType::spi2:
          return GpioAf::af0;
        case PeriphType::tim1:
          return GpioAf::af2;
        case PeriphType::i2c2:
          return GpioAf::af6;
        default:
          break;
      }
      break;
    case GpioPinType::pb15:
      switch (periph_type) {
        case PeriphType::spi2:
          return GpioAf::af0;
        case PeriphType::tim1:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pc6:
      switch (periph_type) {
        case PeriphType::tim3:
          return GpioAf::af1;
        case PeriphType::tim2:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pc7:
      switch (periph_type) {
        case PeriphType::tim3:
          return GpioAf::af1;
        case PeriphType::tim2:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pc13:
      switch (periph_type) {
        case PeriphType::tim1:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pc14:
      switch (periph_type) {
        case PeriphType::tim1:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pc15:
      switch (periph_type) {
        case PeriphType::rcc:
          return GpioAf::af0;
        default:
          break;
      }
      break;
    case GpioPinType::pd0:
      switch (periph_type) {
        case PeriphType::spi2:
          return GpioAf::af1;
        case PeriphType::tim16:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pd1:
      switch (periph_type) {
        case PeriphType::spi2:
          return GpioAf::af1;
        case PeriphType::tim17:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pd2:
      switch (periph_type) {
        case PeriphType::tim3:
          return GpioAf::af1;
        case PeriphType::tim1:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pd3:
      switch (periph_type) {
        case PeriphType::usart2:
          return GpioAf::af0;
        case PeriphType::spi2:
          return GpioAf::af1;
        case PeriphType::tim1:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pf0:
      switch (periph_type) {
        case PeriphType::tim14:
          return GpioAf::af2;
        default:
          break;
      }
      break;
    case GpioPinType::pf1:
      switch (periph_type) {
        case PeriphType::rcc:
          return GpioAf::af0;
        default:
          break;
      }
      break;
    case GpioPinType::pf2:
      switch (periph_type) {
        case PeriphType::rcc:
          return GpioAf::af0;
        default:
          break;
      }
      break;
    default:
      break;
  }
  return std::nullopt;
}

template<typename T>
constexpr static std::optional<PeriphType> as_periph_type(T type) {
  return std::nullopt;
}

template<>
constexpr std::optional<PeriphType> as_periph_type(DmaType type) {
  switch (type) {
    case DmaType::dma1:
      return PeriphType::dma1;
  }
  return std::nullopt;
}
template<>
constexpr std::optional<PeriphType> as_periph_type(GpioType type) {
  switch (type) {
    case GpioType::gpioa:
      return PeriphType::gpioa;
    case GpioType::gpiob:
      return PeriphType::gpiob;
    case GpioType::gpioc:
      return PeriphType::gpioc;
    case GpioType::gpiod:
      return PeriphType::gpiod;
    case GpioType::gpiof:
      return PeriphType::gpiof;
  }
  return std::nullopt;
}
template<>
constexpr std::optional<PeriphType> as_periph_type(TimType type) {
  switch (type) {
    case TimType::tim1:
      return PeriphType::tim1;
    case TimType::tim2:
      return PeriphType::tim2;
    case TimType::tim3:
      return PeriphType::tim3;
    case TimType::tim14:
      return PeriphType::tim14;
    case TimType::tim16:
      return PeriphType::tim16;
    case TimType::tim17:
      return PeriphType::tim17;
  }
  return std::nullopt;
}
template<>
constexpr std::optional<PeriphType> as_periph_type(UsartType type) {
  switch (type) {
    case UsartType::usart1:
      return PeriphType::usart1;
    case UsartType::usart2:
      return PeriphType::usart2;
  }
  return std::nullopt;
}
template<>
constexpr std::optional<PeriphType> as_periph_type(SpiType type) {
  switch (type) {
    case SpiType::spi1:
      return PeriphType::spi1;
    case SpiType::spi2:
      return PeriphType::spi2;
  }
  return std::nullopt;
}
template<>
constexpr std::optional<PeriphType> as_periph_type(AdcType type) {
  switch (type) {
    case AdcType::adc1:
      return PeriphType::adc1;
  }
  return std::nullopt;
}
template<>
constexpr std::optional<PeriphType> as_periph_type(I2cType type) {
  switch (type) {
    case I2cType::i2c1:
      return PeriphType::i2c1;
    case I2cType::i2c2:
      return PeriphType::i2c2;
  }
  return std::nullopt;
}

}
}

#endif /* IGB_STM32_BASE_MCU_DEVICE_STM32G031XX_H */
