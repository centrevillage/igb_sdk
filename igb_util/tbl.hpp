#pragma once

#include <cstdint>

namespace igb {

constexpr inline uint32_t euclid_tbl_32[32] = {
// #!ruby
//def gen_basic_euclid(k, n)
//  if k > n
//    k = n
//  end
//  pattern = [[1]] * k + [[0]] * (n - k)
//  while k > 0
//    cut = [k, pattern.length - k].min
//    pattern = (0 ... cut).map {|i| pattern[i] + pattern[k + i]} + pattern[cut ... k] + pattern[(k+cut)...]
//    k = cut
//  end
//  pattern.flatten
//end
//
//(0..31).each do |fill|
//  print <<-EOS
//    0b#{gen_basic_euclid(fill, 32).join('')},
//  EOS
//end
    0b00000000000000000000000000000000,
    0b10000000000000000000000000000000,
    0b10000000000000001000000000000000,
    0b10000000000100000000010000000000,
    0b10000000100000001000000010000000,
    0b10000001000001000001000000100000,
    0b10000010000100001000001000010000,
    0b10000100010000100001000100001000,
    0b10001000100010001000100010001000,
    0b10001001000100010010001001000100,
    0b10001001001001001000100100100100,
    0b10010100100100100100100100100100,
    0b10010100100101001001010010010100,
    0b10010101001010010100101001010010,
    0b10010101010010101001010101001010,
    0b10010101010101010100101010101010,
    0b10101010101010101010101010101010,
    0b10110101010101010101101010101010,
    0b10110101010110101011010101011010,
    0b10110101011010110101101011010110,
    0b10110101101101011011010110110101,
    0b10110101101101101101101101101101,
    0b10111011011011011011101101101101,
    0b10111011011101110110111011011101,
    0b10111011101110111011101110111011,
    0b10111101110111101111011101111011,
    0b10111110111101111011111011110111,
    0b10111111011111011111011111101111,
    0b10111111101111111011111110111111,
    0b10111111111101111111110111111111,
    0b10111111111111111011111111111111,
    0b10111111111111111111111111111111,
};

}


